[1mdiff --git a/Percolation/Percolation.java b/Percolation/Percolation.java[m
[1mindex 1f5db7c..6fc6e0b 100644[m
[1m--- a/Percolation/Percolation.java[m
[1m+++ b/Percolation/Percolation.java[m
[36m@@ -1,34 +1,29 @@[m
 /****************************************************************************[m
[31m-Percolation algorithm.[m
[31m-[m
[31m-Monte Carlo simulation. To estimate the percolation threshold, consider the following computational experiment:[m
[31m-[m
[31m-    Initialize all sites to be blocked.[m
[31m-[m
[31m-    Repeat the following until the system percolates:[m
 [m
[31m-        Choose a site (row i, column j) uniformly at random among all blocked sites.[m
[31m-[m
[31m-        Open the site (row i, column j).[m
[32m+[m[32mPercolation algorithm.[m
 [m
[31m-    The fraction of sites that are opened when the system percolates provides an estimate of the percolation threshold.[m
[32m+[m[32mprepare for data and basic operation of the grid[m
 [m
[31m-For example, if sites are opened in a 20-by-20 lattice according to the snapshots below, then our estimate of the percolation threshold is 204/400 = 0.51 because the system percolates when the 204th site is opened.[m
[31m- *[m
[31m- ****************************************************************************/[m
[32m+[m[32m(Corner cases.  By convention, the row and column indices i and j are integers between 1 and N, where (1, 1) is the upper-left site: Throw a java.lang.IndexOutOfBoundsException if any argument to open(), isOpen(), or isFull() is outside its prescribed range. The constructor should throw a java.lang.IllegalArgumentException if N â‰¤ 0.[m
[32m+[m[32mThe constructor should take time proportional to N^2)[m
 [m
[31m-import MyUtils.*;[m
[32m+[m[32m****************************************************************************/[m
 [m
 public class Percolation {[m
 [m
[31m-    public int[][] grid; // the grid[m
[32m+[m[32m    public int[][] grid; // the grid, percolation model[m
[32m+[m[32m    public WeightedUuickUiounUF gridConnection; // the connection model[m
[32m+[m[32m    public int n; // N[m
 [m
     /*[m
     create N-by-N grid, with all sites blocked[m
[31m-    (Corner cases.  By convention, the row and column indices i and j are integers between 1 and N, where (1, 1) is the upper-left site: Throw a java.lang.IndexOutOfBoundsException if any argument to open(), isOpen(), or isFull() is outside its prescribed range. The constructor should throw a java.lang.IllegalArgumentException if N â‰¤ 0.[m
[31m-    The constructor should take time proportional to N^2)[m
     */[m
     public Percolation(int N) {[m
[32m+[m[32m        if (N<=0) {[m
[32m+[m[32m            throw java.lang.IllegalArgumentException;[m
[32m+[m[32m        }[m
[32m+[m[32m        n = N;[m
[32m+[m[32m        gridConnection = WeightedUuickUiounUF(N*N+2); //0 is top virtual site, N^2+1 is bottom virtual site[m
         for (int i=1; i<=N; i++)[m
             for (int j=1; j<=N; j++)[m
             {[m
[36m@@ -37,18 +32,60 @@[m [mpublic class Percolation {[m
     }[m
 [m
     /*[m
[32m+[m[32m    return the  (i, j) of the site given its number[m
[32m+[m[32m    */[m
[32m+[m[32m    public int[2] mapToIndex(int siteID) {[m
[32m+[m[32m        int[2] site = [0, 0];[m
[32m+[m[32m        int j = siteID%n;[m
[32m+[m[32m        int i = (siteID-i)/n;[m
[32m+[m[32m        site[0] = i+1;[m
[32m+[m[32m        site[1] = j+1;[m
[32m+[m[32m        return site;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    /*[m
[32m+[m[32m    return the siteId of the site given its (i, j)[m
[32m+[m[32m    */[m
[32m+[m[32m    public int mapToId(int i, int j) {[m
[32m+[m[32m        return (i-1)*n+j-1;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    /*[m
[32m+[m[32m    return a site's neighber nites, 3 or 4 sites, top, bottom, left, right respectively[m
[32m+[m[32m    */[m
[32m+[m[32m    public int[4] neighbers(int i, int j) {[m
[32m+[m[32m        int[4] neighbers;[m
[32m+[m[32m        neighbers[0] = (i==1)?0:mapToId(i-1, j);[m
[32m+[m[32m        neighbers[1] = (i==n)?(n*n+1):mapToId(i+1, j);[m
[32m+[m[32m        neighbers[2] = (j==1)?-1:mapToId(i, j-1);[m
[32m+[m[32m        neighbers[3] = (j==n)?-1:mapToId(i, j+1);[m
[32m+[m[32m        return neighbers;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    /*[m
     open site (row i, column j) if it is not open already[m
[32m+[m[32m    connect the sites surround it[m
     */[m
     public void open(int i, int j) {[m
[32m+[m[32m        if (i>n || j>n || i<1 || j<1) {[m
[32m+[m[32m            throw java.lang.IndexOutOfBoundsException;[m
[32m+[m[32m        }[m
         if (grid[i][j]!=1) {[m
             grid[i][j] = 1;[m
[32m+[m[32m            nerighbers = neighbers(i, j)[m
[32m+[m[32m            for (int index=0; index<4; index++) {[m
[32m+[m
[32m+[m[32m            }[m
         }[m
[31m-   }[m
[32m+[m[32m    }[m
 [m
     /*[m
[31m-    is site (row i, column j) open?[m
[32m+[m[32m     site (row i, column j) open?[m
     */[m
     public boolean isOpen(int i, int j) {[m
[32m+[m[32m        if (i>n || j>n || i<1 || j<1) {[m
[32m+[m[32m            throw java.lang.IndexOutOfBoundsException;[m
[32m+[m[32m        }[m
         return (grid[i][j] == 1);[m
     }[m
 [m
[36m@@ -56,11 +93,15 @@[m [mpublic class Percolation {[m
     is site (row i, column j) full?[m
     */[m
     public boolean isFull(int i, int j) {[m
[32m+[m[32m        if (i>n || j>n || i<1 || j<1) {[m
[32m+[m[32m            throw java.lang.IndexOutOfBoundsException;[m
[32m+[m[32m        }[m
         return (grid[i][j] == 0);[m
     }[m
 [m
     /*[m
     does the system percolate?[m
[32m+[m[32m    check if the virtual top site and virtual bottom site connected[m
     */[m
     public boolean percolates()[m
     {[m
[36m@@ -68,6 +109,7 @@[m [mpublic class Percolation {[m
     }[m
 [m
     public static void main(String[] args) {[m
[31m-        System.out.println("Hello, World");[m
[32m+[m[32m        Percolation p = new Percolation(args[1]);[m
[32m+[m
     }[m
 }[m
[1mdiff --git a/Percolation/QuickFindUF.java b/Percolation/QuickFindUF.java[m
[1mindex b2025a8..25cf6e6 100644[m
[1m--- a/Percolation/QuickFindUF.java[m
[1m+++ b/Percolation/QuickFindUF.java[m
[36m@@ -25,8 +25,6 @@[m
  *  @author Kevin Wayne[m
  */[m
 [m
[31m-package MyUtils;[m
[31m-[m
 public class QuickFindUF {[m
     private int[] id;    // id[i] = component identifier of i[m
     private int count;   // number of components[m
[1mdiff --git a/Percolation/WeightedQuickUnionUF.java b/Percolation/WeightedQuickUnionUF.java[m
[1mindex 14df551..7fbde55 100644[m
[1m--- a/Percolation/WeightedQuickUnionUF.java[m
[1m+++ b/Percolation/WeightedQuickUnionUF.java[m
[36m@@ -26,8 +26,6 @@[m
  *  @author Kevin Wayne[m
  */[m
 [m
[31m-package MyUtils;[m
[31m-[m
 public class WeightedQuickUnionUF {[m
     private int[] id;    // id[i] = parent of i[m
     private int[] sz;    // sz[i] = number of objects in subtree rooted at i[m
[1mdiff --git a/algs4.jar b/algs4.jar[m
[1mdeleted file mode 100644[m
[1mindex 8801d5f..0000000[m
Binary files a/algs4.jar and /dev/null differ
[1mdiff --git a/stdlib.jar b/stdlib.jar[m
[1mdeleted file mode 100644[m
[1mindex 42792bb..0000000[m
Binary files a/stdlib.jar and /dev/null differ
